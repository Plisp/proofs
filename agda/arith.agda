{-# OPTIONS --without-K --exact-split --safe #-}

{-
  number theory
-}

open import logic
open import types
open import eq
open import op

-- lambda style predecessor
pred' : ‚Ñï ‚Üí ‚Ñï
pred' n = snd (pred'' n) where
          pred'' : ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï
          pred'' zero = (zero , zero)
          pred'' (suc n) = (suc (fst (pred'' n)) , fst (pred'' n))

pred : ‚Ñï ‚Üí ‚Ñï
pred 0       = 0
pred (suc n) = n

cancel-suc : {x y : ‚Ñï} ‚Üí suc x Ôºù suc y ‚Üí x Ôºù y
cancel-suc = ap pred

‚Ñï-decidable-equality : has-decidable-equality ‚Ñï
‚Ñï-decidable-equality 0       0       = (inl (refl 0))
‚Ñï-decidable-equality 0       (suc b) = inr (‚â†-sym (suc-neq-zero b))
‚Ñï-decidable-equality (suc a) 0       = inr (suc-neq-zero a)
‚Ñï-decidable-equality (suc a) (suc b) = f (‚Ñï-decidable-equality a b)
  where
    f = Ôºã-ind (Œª _ ‚Üí decidable (suc a Ôºù suc b))
        (Œª (p : a Ôºù b) ‚Üí inl (ap suc p))
        (Œª (f : a ‚â† b) ‚Üí inr (f ‚àò cancel-suc))

{-
  inequality TODO prove this is equivalent to other one
-}

_‚âº_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
x ‚âº y = Œ£ z Íûâ ‚Ñï , (x + z) Ôºù y

infix 4 _‚âº_

-- partial order of ‚â§
-- 0     ‚â§ y     = ùüô
-- suc x ‚â§ 0     = ùüò
-- suc x ‚â§ suc y = x ‚â§ y

‚â§-refl : (n : ‚Ñï) ‚Üí (n ‚â§ n)
‚â§-refl 0       = ‚ãÜ
‚â§-refl (suc n) = ‚â§-refl n

‚â§-trans : (l m n : ‚Ñï) ‚Üí (l ‚â§ m) ‚Üí (m ‚â§ n) ‚Üí (l ‚â§ n)
‚â§-trans 0 l n _ _ = ‚ãÜ
‚â§-trans (suc l) 0       0       p q = p
‚â§-trans (suc l) 0       (suc n) p q = ‚ä•-rec (suc l ‚â§ suc n) p
‚â§-trans (suc l) (suc m) 0       p q = q
‚â§-trans (suc l) (suc m) (suc n) p q = ‚â§-trans l m n p q

‚â§-anti : (m n : ‚Ñï) ‚Üí m ‚â§ n ‚Üí n ‚â§ m ‚Üí m Ôºù n
‚â§-anti 0       0       p q = refl 0
‚â§-anti 0       (suc n) p q = ‚ä•-rec (0 Ôºù suc n) q
‚â§-anti (suc m) 0       p q = ‚ä•-rec (suc m Ôºù 0) p
‚â§-anti (suc m) (suc n) p q = ap suc (‚â§-anti m n p q)

-- strict inequality
_<_ _>_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
x < y = suc x ‚â§ y
x > y = suc y ‚â• x
infix 4 _<_ _>_

{-
  addition
-}

+-assoc : (op-assoc _+_)
+-assoc 0       y z = refl (y + z)
+-assoc (suc x) y z = ap suc (+-assoc x y z)

-- commutativity of addition
add-commutes0 : (n : ‚Ñï) ‚Üí (n + 0) Ôºù n
add-commutes0 0 = refl 0
add-commutes0 (suc n) =
  begin                           suc n  + 0
    =‚ü®‚ü©                           suc (n + 0)
    =‚ü® ap suc (add-commutes0 n) ‚ü© suc n        -- induction hypothesis
  ‚àé

add-commutes-sucr : (m n : ‚Ñï) ‚Üí suc (m + n) Ôºù (m + suc n)
add-commutes-sucr 0 n =
  begin suc (0 + n)
    =‚ü®‚ü© suc n
    =‚ü®‚ü© 0 + suc n
  ‚àé
add-commutes-sucr (suc m) n =
  begin                                 suc (suc m  + n)
    =‚ü®‚ü©                                 suc (suc (m + n))
    =‚ü® ap suc (add-commutes-sucr m n) ‚ü© suc (m + suc n)
    =‚ü®‚ü©                                 suc m  + suc n
  ‚àé

add-commutes : (op-commut _+_)
add-commutes 0 n =
  begin                        0 + n
    =‚ü®‚ü©                        n
    =‚ü® sym (add-commutes0 n) ‚ü© n + 0
  ‚àé
add-commutes (suc m) n =
  begin                            suc m  + n
    =‚ü®‚ü©                            suc (m + n)
    =‚ü® ap suc (add-commutes m n) ‚ü© suc (n + m)
    =‚ü® add-commutes-sucr n m ‚ü©     n + suc m
  ‚àé

-- cancellation
+-cancel : (x y z : ‚Ñï) ‚Üí (x + y Ôºù x + z) ‚Üí (y Ôºù z)
+-cancel 0       y z p = p
+-cancel (suc x) y z p = (+-cancel x y z (ap pred p))

{-
  subtraction TODO prove inverse theorems
-}

-- signed type needed
data ‚Ñ§ : Set where
  pos : (n : ‚Ñï) ‚Üí ‚Ñ§
  neg : (n : ‚Ñï) ‚Üí ‚Ñ§
{-# BUILTIN INTEGER ‚Ñ§ #-}
{-# BUILTIN INTEGERPOS pos #-}
{-# BUILTIN INTEGERNEGSUC neg #-}

{-
  multiples
-}

data Multiple : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  div-zero : (k : ‚Ñï) ‚Üí Multiple k 0
  div-suck : {n k : ‚Ñï} ‚Üí Multiple k n ‚Üí Multiple k (n + k) -- oops!

test-multiple : Multiple 3 6
test-multiple = div-suck (div-suck (div-zero 3))

div-coe : {a b k : ‚Ñï} ‚Üí Multiple k (a + b) ‚Üí Multiple k (b + a)
div-coe {a} {b} {k} m = »∑ (Multiple k) (add-commutes a b) m

div-four‚Üídiv-two : {n : ‚Ñï} ‚Üí Multiple 4 n ‚Üí Multiple 2 n
div-four‚Üídiv-two (div-zero .4) = div-zero 2
div-four‚Üídiv-two (div-suck {k} {4} p) =
  (div-coe {4} {k}
   (div-coe {2 + k} {2}
    (div-suck {2 + k} {2}
     (div-coe {k} {2}
      (div-suck {k} {2} (div-four‚Üídiv-two p))))))
