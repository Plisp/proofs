{-# OPTIONS --without-K --exact-split --safe #-}

{-
  number theory
-}

open import logic
open import types
open import path
open import op
open import hlevel

-- peano +
_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero    + b = b
(suc a) + b = suc (a + b)
infix 7 _+_

_*_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero    * b = 0
(suc a) * b = (a * b) + b
infix 8 _*_

suc-x‚â†0 : (x : ‚Ñï) ‚Üí suc x ‚â† 0 -- peano axiom, note pattern lambda!
suc-x‚â†0 _ p = ùüô‚â†ùüò (ap (Œª { 0 ‚Üí ùüò ; (suc _) ‚Üí ùüô }) p)

-- lambda style predecessor
pred' : ‚Ñï ‚Üí ‚Ñï
pred' n = snd (pred'' n) where
          pred'' : ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï
          pred'' zero = (zero , zero)
          pred'' (suc n) = (suc (fst (pred'' n)) , fst (pred'' n))

pred : ‚Ñï ‚Üí ‚Ñï
pred zero    = 0
pred (suc n) = n

suc-cancel : {x y : ‚Ñï} ‚Üí suc x Ôºù suc y ‚Üí x Ôºù y
suc-cancel = ap pred

‚Ñï-decidable-equality : ‚Ñï has-decidable-equality
‚Ñï-decidable-equality zero    zero    = (inl (refl zero))
‚Ñï-decidable-equality zero    (suc b) = inr (‚â†-sym (suc-x‚â†0 b))
‚Ñï-decidable-equality (suc a) zero    = inr (suc-x‚â†0 a)
‚Ñï-decidable-equality (suc a) (suc b) = f (‚Ñï-decidable-equality a b)
  where
    f = indÔºã (Œª _ ‚Üí decidable (suc a Ôºù suc b))
        (Œª (p : a Ôºù b) ‚Üí inl (ap suc p))
        (Œª (f : a ‚â† b) ‚Üí inr (f ‚àò suc-cancel))

{-
  inequality
-}

_‚â§'_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
n ‚â§' zero    = n Ôºù 0
n ‚â§' (suc m) = (n Ôºù suc m) Ôºã n ‚â§' m

refl-‚â§' : (n : ‚Ñï) ‚Üí (n ‚â§' n)
refl-‚â§' zero = refl 0
refl-‚â§' (suc n) = inl (refl (suc n))

trans-‚â§' : (l m n : ‚Ñï) ‚Üí (l ‚â§' m) ‚Üí (m ‚â§' n) ‚Üí (l ‚â§' n)
trans-‚â§' n m    zero p (refl .0) = p
trans-‚â§' n zero (suc l) (refl .0) q = q
trans-‚â§' n (suc m) (suc l) (inl p) (inl q) = inl (p ‚àô q)
trans-‚â§' n (suc m) (suc l) (inl p) (inr q) = inr (subst (Œª x ‚Üí x ‚â§' l) (symÔºù p) q)
trans-‚â§' n (suc m) (suc l) (inr p) (inl q) = inr (subst (Œª x ‚Üí n ‚â§' x)
                                                   (suc-cancel q) p)
trans-‚â§' n (suc m) (suc l) (inr p) (inr q) = inr (trans-‚â§' _ _ _ (inr p) q)

anti-‚â§' : (m n : ‚Ñï) ‚Üí (m ‚â§' n) ‚Üí (n ‚â§' m) ‚Üí (m Ôºù n)
anti-‚â§' zero n p q = symÔºù q
anti-‚â§' (suc m) n p (inl q) = symÔºù q
anti-‚â§' (suc m) (suc n) (inl p) (inr q) = p
anti-‚â§' (suc m) (suc n) (inr p) (inr q) = ap suc (anti-‚â§' m n (l p) (l q))
  where
    l : {m n : ‚Ñï} ‚Üí suc n ‚â§' m ‚Üí n ‚â§' m
    l {m} {n} p = trans-‚â§' n (suc n) m (inr (refl-‚â§' n)) p

-- cleaner def
data _‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  z‚â§n : ‚àÄ {n : ‚Ñï} ‚Üí zero ‚â§ n
  s‚â§s : ‚àÄ {m n : ‚Ñï} ‚Üí m ‚â§ n ‚Üí suc m ‚â§ suc n

refl-‚â§ : (n : ‚Ñï) ‚Üí (n ‚â§ n)
refl-‚â§ zero    = z‚â§n
refl-‚â§ (suc n) = s‚â§s (refl-‚â§ n)

trans-‚â§ : (l m n : ‚Ñï) ‚Üí (l ‚â§ m) ‚Üí (m ‚â§ n) ‚Üí (l ‚â§ n)
trans-‚â§ zero _ _ _ _ = z‚â§n
trans-‚â§ (suc l) (suc m) (suc n) (s‚â§s p) (s‚â§s q) = s‚â§s (trans-‚â§ l m n p q)

anti-‚â§ : (m n : ‚Ñï) ‚Üí (m ‚â§ n) ‚Üí (n ‚â§ m) ‚Üí (m Ôºù n)
anti-‚â§ zero zero _ _ = refl zero
anti-‚â§ (suc m) (suc n) (s‚â§s p) (s‚â§s q) = ap suc (anti-‚â§ m n p q)

_‚â•_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
x ‚â• y = y ‚â§ x
infix 4 _‚â§_ _‚â•_

-- strict inequality
_<_ _>_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
x < y = suc x ‚â§ y
x > y = suc y ‚â• x
infix 4 _<_ _>_

{-
  addition
-}

assoc-+ : (assoc _+_)
assoc-+ zero    y z = refl (y + z)
assoc-+ (suc x) y z = ap suc (assoc-+ x y z)

-- commutativity of addition
idr-+ : (n : ‚Ñï) ‚Üí (n + 0) Ôºù n
idr-+ zero = refl 0
idr-+ (suc n) =
  begin                   suc n  + 0
    =‚ü®‚ü©                   suc (n + 0)
    =‚ü® ap suc (idr-+ n) ‚ü© suc n        -- induction hypothesis
  ‚àé

commutes-sucr-+ : (m n : ‚Ñï) ‚Üí suc (m + n) Ôºù (m + suc n)
commutes-sucr-+ zero n =
  begin suc (0 + n)
    =‚ü®‚ü© suc n
    =‚ü®‚ü© 0 + suc n
  ‚àé
commutes-sucr-+ (suc m) n =
  begin                               suc (suc m  + n)
    =‚ü®‚ü©                               suc (suc (m + n))
    =‚ü® ap suc (commutes-sucr-+ m n) ‚ü© suc (m + suc n)
    =‚ü®‚ü©                               suc m  + suc n
  ‚àé

commutes-+ : commut _+_
commutes-+ zero n =
  begin                 0 + n
    =‚ü®‚ü©                 n
    =‚ü® symÔºù (idr-+ n) ‚ü© n + 0
  ‚àé
commutes-+ (suc m) n =
  begin                          suc m  + n
    =‚ü®‚ü©                          suc (m + n)
    =‚ü® ap suc (commutes-+ m n) ‚ü© suc (n + m)
    =‚ü® commutes-sucr-+ n m ‚ü©     n + suc m
  ‚àé

left-ac-+ = left-ac _+_ assoc-+ commutes-+
right-ac-+ = right-ac _+_ assoc-+ commutes-+

-- cancellation
cancel-+ : (x y z : ‚Ñï) ‚Üí (x + y Ôºù x + z) ‚Üí (y Ôºù z)
cancel-+ zero    y z p = p
cancel-+ (suc x) y z p = (cancel-+ x y z (ap pred p))

n+1Ôºùsuc : (n : ‚Ñï) ‚Üí n + 1 Ôºù suc n
n+1Ôºùsuc n = commutes-+ n 1

{-
  subtraction TODO
-}

-- signed type needed
data ‚Ñ§ : Set where
  pos : (n : ‚Ñï) ‚Üí ‚Ñ§
  neg : (n : ‚Ñï) ‚Üí ‚Ñ§
{-# BUILTIN INTEGER ‚Ñ§ #-}
{-# BUILTIN INTEGERPOS pos #-}
{-# BUILTIN INTEGERNEGSUC neg #-}

{-
  multiplication
-}
-- _*_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
-- zero    * b = 0
-- (suc a) * b = (a * b) + b

idr-* : (n : ‚Ñï) ‚Üí n * 1 Ôºù n
idr-* zero = refl _
idr-* (suc n) = ap (Œª e ‚Üí e + 1) (idr-* n) ‚àô n+1Ôºùsuc n

ldistrib-*-+ : (a b c : ‚Ñï) ‚Üí a * (b + c) Ôºù a * b + a * c
ldistrib-*-+ zero b c = refl _
ldistrib-*-+ (suc a) b c =
  begin                                                    suc a * (b + c)
    =‚ü®‚ü©                                                    a * (b + c) + (b + c)
    =‚ü® ap (Œª e ‚Üí e + (b + c)) (ldistrib-*-+ a b c) ‚ü©       (a * b + a * c) + (b + c)
    =‚ü® right-ac-+ (a * b) (a * c) (b + c) ‚ü©                (a * b + (b + c)) + a * c
    =‚ü® ap (Œª e ‚Üí e + a * c) (symÔºù (assoc-+ (a * b) b c)) ‚ü© (suc a * b + c) + a * c
    =‚ü® assoc-+ (suc a * b) c (a * c) ‚ü©                     suc a * b + (c + a * c)
    =‚ü® ap (Œª e ‚Üí suc a * b + e) (commutes-+ c (a * c)) ‚ü©   suc a * b + suc a * c
  ‚àé

rdistrib-*-+ : (a b c : ‚Ñï) ‚Üí (a + b) * c Ôºù a * c + b * c
rdistrib-*-+ zero b c = refl _
rdistrib-*-+ (suc a) b c =
  begin                                        (suc a + b) * c
    =‚ü®‚ü©                                        suc (a + b) * c
    =‚ü®‚ü©                                        (a + b) * c + c
    =‚ü® ap (Œª e ‚Üí e + c) (rdistrib-*-+ a b c) ‚ü© (a * c + b * c) + c
    =‚ü® right-ac-+ (a * c) (b * c) c ‚ü©          (a * c + c) + b * c
    =‚ü®‚ü©                                        suc a * c + b * c
  ‚àé

zero-* : (n : ‚Ñï) ‚Üí n * 0 Ôºù 0
zero-* zero = refl _
zero-* (suc n) = idr-+ (n * 0) ‚àô zero-* n

commutes-* : commut _*_
commutes-* zero b = symÔºù (zero-* b)
commutes-* (suc a) b =
  begin                                        suc a * b
    =‚ü®‚ü©                                        a * b + b
    =‚ü® ap (Œª e ‚Üí e + b) (commutes-* a b) ‚ü©     b * a + b
    =‚ü® ap (Œª e ‚Üí b * a + e) (symÔºù (idr-* b)) ‚ü© b * a + b * 1
    =‚ü® symÔºù (ldistrib-*-+ b a 1) ‚ü©             b * (a + 1)
    =‚ü® ap (Œª e ‚Üí b * e) (n+1Ôºùsuc a) ‚ü©          b * suc a
  ‚àé

assoc-* : assoc _*_
assoc-* zero    y z = refl _
assoc-* (suc x) y z =
  begin                                         (suc x * y) * z
    =‚ü®‚ü©                                         ((x * y) + y) * z
    =‚ü® rdistrib-*-+ (x * y) y z ‚ü©               (x * y) * z + y * z
    =‚ü® ap (Œª e ‚Üí e + (y * z)) (assoc-* x y z) ‚ü© x * (y * z) + y * z
    =‚ü®‚ü©                                         suc x * (y * z)
  ‚àé

left-ac-* = left-ac _*_ assoc-* commutes-*
right-ac-* = right-ac _*_ assoc-* commutes-*

{-
  multiples
-}

data Multiple : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  div-zero : (k : ‚Ñï) ‚Üí Multiple k 0
  div-suck : {n k : ‚Ñï} ‚Üí Multiple k n ‚Üí Multiple k (n + k) -- oops!

test-multiple : Multiple 3 6
test-multiple = div-suck (div-suck (div-zero 3))

div-coe : {a b k : ‚Ñï} ‚Üí Multiple k (a + b) ‚Üí Multiple k (b + a)
div-coe {a} {b} {k} m = subst (Œª n ‚Üí Multiple k n) (commutes-+ a b) m

div-four‚Üídiv-two : {n : ‚Ñï} ‚Üí Multiple 4 n ‚Üí Multiple 2 n
div-four‚Üídiv-two (div-zero .4) = div-zero 2
div-four‚Üídiv-two (div-suck {k} {4} p) =
  (div-coe {4} {k}
   (div-coe {2 + k} {2}
    (div-suck {2 + k} {2}
     (div-coe {k} {2}
      (div-suck {k} {2} (div-four‚Üídiv-two p))))))
