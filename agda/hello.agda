{-# OPTIONS --without-K --exact-split --safe #-}

{-
  random proofs
-}

open import logic
open import eq
open import types
open import hott

ùüö = ùüô Ôºã ùüô
ùüö-ind : (A : ùüö ‚Üí Set ‚Ñì) ‚Üí A (inl ‚ãÜ) ‚Üí A (inr ‚ãÜ) ‚Üí ((b : ùüö) ‚Üí A b)
ùüö-ind A a‚ÇÄ a‚ÇÅ = indÔºã A
                (ind‚ä§ (Œª (x : ùüô) ‚Üí (A (inl x))) a‚ÇÄ)
                (ind‚ä§ (Œª (x : ùüô) ‚Üí (A (inr x))) a‚ÇÅ)

uniqŒª : {A : Set ‚Ñì} {B : Set ‚Ñì‚ÇÅ} ‚Üí (f : A ‚Üí B) ‚Üí f Ôºù (Œª x ‚Üí f x)
uniqŒª f = refl f -- eta moment

uniq√ó : {A : Set ‚Ñì} {B : Set ‚Ñì‚ÇÅ} ‚Üí (p : A √ó B) ‚Üí p Ôºù (fst p , snd p)
uniq√ó (a , b) = refl (a , b)

uniq‚ãÜ = is-center ‚ä§ ùüô-is-singleton

{-
  \j the fun way!
-}

-- ‚àÄ x y equal, choosing a = y, then apply ‚Öâ, 'coerce' back
»∑' : {A : Set ‚Ñì} (C : (x y : A) ‚Üí (x Ôºù y) ‚Üí Set ‚Ñì‚ÇÅ)
   ‚Üí ((x : A) ‚Üí C x x (refl x))
   ‚Üí (x y : A) (p : x Ôºù y) ‚Üí C x y p
»∑' C f x y p = ‚Öâ x (Œª y p ‚Üí C x y p) (f x) y p

‚Öâ' : {A : Set ‚Ñì} (a : A)
   ‚Üí (C : (x : A) ‚Üí (x Ôºù a) ‚Üí Set ‚Ñì‚ÇÅ)
   ‚Üí C a (refl a)
   ‚Üí (x : A) (p : x Ôºù a) ‚Üí C x p
‚Öâ' {‚Ñì}{‚Ñì‚ÇÅ} {A} a C ca x p -- quantify over ‚àÄ!! such predicates and their 'base'
  = (»∑ (Œª x y (q : x Ôºù y) ‚Üí Œ† D ‚à∂ ((x : A) ‚Üí (x Ôºù y) ‚Üí Set ‚Ñì‚ÇÅ) ,
                             (D y (refl y) ‚Üí D x q))
       (Œª x ‚Üí Œª D p ‚Üí p)
       x a p) C ca

{-
  nats are a W-type
-}

data WNatB : Bool ‚Üí Set where
  wleft  : ‚ä• ‚Üí WNatB false
  wright : ‚ä§ ‚Üí WNatB true

WNat : Set
WNat = W Bool WNatB

wzero : WNat
wzero = false ‚óÇ (Œª {(wleft ())})

wsuc : WNat ‚Üí WNat
wsuc n = true ‚óÇ (Œª _ ‚Üí n)

wrec : {C : Set} ‚Üí WNat ‚Üí C ‚Üí (WNat ‚Üí C ‚Üí C) ‚Üí C
wrec (false ‚óÇ _) z _ = z
wrec (true  ‚óÇ f) z s = s (f (wright ‚ãÜ)) (wrec (f (wright ‚ãÜ)) z s)

{-
  double negation translation
-}

lem : {P : Set} ‚Üí ((P Ôºã (P ‚Üí ‚ä•)) ‚Üí ‚ä•) ‚Üí ‚ä•
lem f = f (inr (Œª p ‚Üí f (inl p)))

proof-by-negation : {P : Set} ‚Üí P ‚Üí ((P ‚Üí ‚ä•) ‚Üí ‚ä•)
proof-by-negation p f = f p

triple-elim : {P : Set} ‚Üí (((P ‚Üí ‚ä•) ‚Üí ‚ä•) ‚Üí ‚ä•) ‚Üí (P ‚Üí ‚ä•)
triple-elim f p = f (proof-by-negation p)

lem‚Üíproof-by-contradiction : {P : Set} ‚Üí (P Ôºã (P ‚Üí ‚ä•)) ‚Üí ((P ‚Üí ‚ä•) ‚Üí ‚ä•) ‚Üí P
lem‚Üíproof-by-contradiction {P} lem nnp = indÔºã (Œª _ ‚Üí P) id lemma lem
  where
    lemma : (P ‚Üí ‚ä•) ‚Üí P
    lemma = Œª np ‚Üí ind‚ä• (Œª _ ‚Üí P) (nnp np)

{-
  contradiction leads to bottom
-}

data Bad : ‚Ñï ‚Üí Set where
  badt : ‚ä§ ‚Üí Bad 0
  badf : ‚ä• ‚Üí Bad 1

destroy : Bad 1 ‚Üí ‚ä•
destroy (badf void) = void

negation : (0 Ôºù 1) ‚Üí ‚ä•
negation eq = destroy (transport Bad eq (badt ‚ãÜ))

{-
  bounded vectors
-}

data Vec (A : Set) : ‚Ñï ‚Üí Set where
  []   : Vec A zero
  _‚à∑_ : {n : ‚Ñï} ‚Üí A ‚Üí Vec A n ‚Üí Vec A (suc n)

length : {A : Set} {n : ‚Ñï} ‚Üí Vec A n ‚Üí ‚Ñï
length {_} {n} _ = n

_!!_ : {A : Set} {n : ‚Ñï} ‚Üí Vec A n ‚Üí Fin n ‚Üí A
(a ‚à∑ as) !! fz   = a
(a ‚à∑ as) !! fs b = as !! b

_++_ : {A : Set} {x y : ‚Ñï} ‚Üí Vec A x ‚Üí Vec A y ‚Üí Vec A (x + y)
[]       ++ bs = bs
(a ‚à∑ as) ++ bs = a ‚à∑ (as ++ bs)

{-
  compile-time tests !
-}

test-len : (length (1 ‚à∑ 2 ‚à∑ [])) Ôºù 2
test-len = refl 2

equal : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
equal 0       0       = true
equal (suc x) 0       = false
equal 0       (suc y) = false
equal (suc x) (suc y) = equal x y

-- bad definition
-- p : ‚àÄ n ‚Üí (equal n n) Ôºù true
-- p n = refl true

{-
  functor laws for A -> Vec A n
-}

map : {A B : Set} {n : ‚Ñï} ‚Üí (f : A ‚Üí B) ‚Üí Vec A n ‚Üí Vec B n
map f []        = []
map f (a ‚à∑ as) = (f a) ‚à∑ (map f as)

map-id : {A : Set} {n : ‚Ñï} (xs : Vec A n) ‚Üí (map id xs) Ôºù xs
map-id [] =
  begin
    map id [] =‚ü®‚ü© []
  ‚àé
map-id (x ‚à∑ xs) =
  begin
                               map id (x ‚à∑ xs)
    =‚ü®‚ü©                        (id x) ‚à∑ (map id xs)
    =‚ü®‚ü©                        x ‚à∑ (map id xs)
    =‚ü® ap (x ‚à∑_) (map-id xs) ‚ü© x ‚à∑ xs
  ‚àé

map-compose : {A B C : Set} {n : ‚Ñï} (f : B ‚Üí C) (g : A ‚Üí B) (xs : Vec A n)
            ‚Üí map (f ‚àò g) xs Ôºù map f (map g xs)
map-compose f g [] =
  begin
        map (f ‚àò g) []
    =‚ü®‚ü© []
    =‚ü®‚ü© map f []
    =‚ü®‚ü© map f (map g [])
  ‚àé
map-compose f g (x ‚à∑ xs) =
  begin
                                              map (f ‚àò g) (x ‚à∑ xs)
    =‚ü®‚ü©                                       (f ‚àò g) x ‚à∑ map (f ‚àò g) xs
    =‚ü®‚ü©                                       f (g x) ‚à∑ map (f ‚àò g) xs
    =‚ü® ap (f (g x) ‚à∑_) (map-compose f g xs) ‚ü© f (g x) ‚à∑ map f (map g xs)
    =‚ü®‚ü©                                       map f ((g x) ‚à∑ map g xs)
    =‚ü®‚ü©                                       map f (map g (x ‚à∑ xs))
  ‚àé
